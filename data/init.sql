PRAGMA foreign_keys = ON;

-- INDEPENDENT TABLES
CREATE TABLE IF NOT EXISTS AUTHORIZATION (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    LEVEL TEXT NOT NULL,
    UNIQUE(LEVEL)
);

CREATE TABLE IF NOT EXISTS USER (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    FIRST_NAME TEXT NOT NULL,
    MIDDLE_INIT CHAR(1),
    LAST_NAME TEXT NOT NULL,
    SUFFIX VARCHAR(6),
    ADDRESS TEXT NOT NULL,
    EMAIL TEXT NOT NULL,
    PHONE_NUMBER TEXT NOT NULL,
    DOB DATE NOT NULL,
    UNIQUE (FIRST_NAME, LAST_NAME, SUFFIX)
);

CREATE TABLE IF NOT EXISTS AUTHENTICATION (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    USER_NAME TEXT,
    PASSWORD TEXT NOT NULL,
    EMAIL TEXT NOT NULL,
    UNIQUE(EMAIL),
    UNIQUE(USER_NAME)
);

-- DEPENDENT TABLE
CREATE TABLE IF NOT EXISTS HAVE (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    USER INTEGER,
    RESTRICTION INTEGER NOT NULL,
    CREDENTIAL INTEGER NOT NULL,
    FOREIGN KEY (USER) REFERENCES USER (ID) ON DELETE CASCADE,
    FOREIGN KEY (RESTRICTION) REFERENCES AUTHORIZATION (ID),
    FOREIGN KEY (CREDENTIAL) REFERENCES AUTHENTICATION (ID)
);

-- TRIGGERS
CREATE TRIGGER IF NOT EXISTS NEW_USER
AFTER INSERT ON USER
FOR EACH ROW
BEGIN
    INSERT INTO AUTHENTICATION (USER_NAME, PASSWORD, EMAIL)
    VALUES (SUBSTR(NEW.FIRST_NAME,1,3)||last_insert_rowid(), 'PASSCODE1',(SUBSTR(NEW.FIRST_NAME,1,3))||last_insert_rowid()||'@example.com');
    INSERT INTO HAVE (USER, RESTRICTION, CREDENTIAL)
    VALUES (NEW.ID, 1,last_insert_rowid());
END;

-- DUMMY DATA
INSERT INTO AUTHORIZATION(LEVEL) VALUES
('CUSTOMER'),
('WORKER'),
('ADMIN');

INSERT INTO USER(FIRST_NAME,MIDDLE_INIT,LAST_NAME,SUFFIX,DOB,ADDRESS,EMAIL,PHONE_NUMBER) VALUES
('JOHN','J','DOE',NULL,'1/23/1993','100 WHOO LN AUSTIN,TX 2121','jdoe@gmail.com','706-111-2222'),
('JOHN','J','DOE','JR.','11/21/2020 ','100 WHOO LN AUSTIN,TX 2121','jde@gmail.com','742-111-2222'),
('Joannna','M','DOE',NULL,'1/10/1996','100 WHOO LN AUSTIN,TX 2121','jmdoe@gmail.com','734-111-2222'),
('AD',NULL,'MIN',NULL,'1/22/1897','100 WHOO LN AUSTIN,TX 2121','min@gmail.com','745-111-2222'),
('WORK',NULL,'ERMAN',NULL,'1/23/1777','100 WHOO LN AUSTIN,TX 2121','erman@gmail.com','721-111-2222'),
('HY',NULL,'YOUNG',NULL,'8/12/1952','100 WHOO LN AUSTIN,TX 2121','je@gmail.com','767-111-2222');

-- MODIFICATION
UPDATE HAVE  SET RESTRICTION = 2 WHERE ID = 5;
UPDATE HAVE  SET RESTRICTION = 3  WHERE ID = 4;

-- VIEWS
DROP VIEW IF EXISTS CUSTOMERS;
DROP VIEW IF EXISTS WORKERS;
DROP VIEW IF EXISTS ADMINS;

CREATE VIEW CUSTOMERS AS
    SELECT USER.FIRST_NAME ||' '|| USER.LAST_NAME AS NAME, USER.SUFFIX,USER.DOB,AUTHENTICATION.USER_NAME, AUTHENTICATION.PASSWORD, AUTHENTICATION.EMAIL, USER.EMAIL, USER.PHONE_NUMBER  
    FROM USER
    JOIN HAVE  ON HAVE.USER = USER.ID 
    JOIN AUTHENTICATION ON AUTHENTICATION.ID = HAVE.CREDENTIAL
    WHERE HAVE.RESTRICTION =1;

CREATE VIEW WORKERS AS
    SELECT USER.FIRST_NAME ||' '|| USER.LAST_NAME AS NAME, USER.SUFFIX,USER.DOB,AUTHENTICATION.USER_NAME, AUTHENTICATION.PASSWORD, AUTHENTICATION.EMAIL, USER.EMAIL, USER.PHONE_NUMBER 
    FROM USER
    JOIN HAVE  ON HAVE.USER = USER.ID 
    JOIN AUTHENTICATION ON AUTHENTICATION.ID = HAVE.CREDENTIAL
    WHERE HAVE.RESTRICTION =2;

CREATE VIEW ADMINS AS
    SELECT USER.FIRST_NAME ||' '|| USER.LAST_NAME AS NAME, USER.SUFFIX,USER.DOB,AUTHENTICATION.USER_NAME, AUTHENTICATION.PASSWORD, AUTHENTICATION.EMAIL, USER.EMAIL, USER.PHONE_NUMBER  
    FROM USER
    JOIN HAVE  ON HAVE.USER = USER.ID 
    JOIN AUTHENTICATION ON AUTHENTICATION.ID = HAVE.CREDENTIAL
    WHERE HAVE.RESTRICTION =3;
